<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Karpach.DebugAttachManager.Controls"
    xmlns:helpers="clr-namespace:Karpach.DebugAttachManager.Helpers"
    xmlns:ux="clr-namespace:Karpach.DebugAttachManager"
    xmlns:system="clr-namespace:System;assembly=mscorlib">
    <Style x:Key="DummyToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SplitButtonFocusVisualStyle" TargetType="{x:Type IFrameworkInputElement}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="3,3,3,3"
                        SnapsToDevicePixels="True"
                        Stroke="{DynamicResource {x:Static ux:Colors.MainForeground}}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1"
                        RadiusX="2"
                        RadiusY="2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" x:Key="ExpanderStyle">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsChecked" Value="False"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Polygon x:Name="Polygon" Fill="{DynamicResource {x:Static ux:Colors.MainForeground}}" Points="0,0 6,0 3,4"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Points" TargetName="Polygon"
                                    Value="0,4 6,4 3,0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <helpers:ThicknessToWidthConverter x:Key="SeparatorConverter"/>
    <helpers:ScaledValueConverter x:Key="ScaledValueConverter"/>

    <Style x:Key="HeaderButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="14" Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <ContentPresenter
                            ContentSource="Icon"
                            Margin="2,0,2,0"
                            Name="PART_IconSite"
                            VerticalAlignment="Center"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                            Content="{Binding Path=Icon, RelativeSource={RelativeSource AncestorType={x:Type controls:SplitButton}}, Mode=TwoWay}"
                            Grid.Column="0"/>
                        <ContentPresenter
                            Name="PART_ContentSite"
                            Margin="{TemplateBinding Control.Padding}"
                            HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                            ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                            RecognizesAccessKey="True"
                            Content="{TemplateBinding ContentControl.Content}"
                            Grid.Column="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" SourceName="PART_IconSite" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_IconSite" Value="Collapsed"/>
                            <Setter Property="Grid.Column" TargetName="PART_ContentSite" Value="0"/>
                            <Setter Property="Grid.ColumnSpan" TargetName="PART_ContentSite" Value="2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <system:Boolean x:Key="TrueValue">True</system:Boolean>
    <Style x:Key="SplitButton" TargetType="{x:Type controls:SplitButton}">
        <Style.Triggers>
            <Trigger Property="controls:SplitButton.IsMouseOver" Value="True">
                <Setter Property="controls:SplitButton.Background" Value="{DynamicResource {x:Static ux:Colors.ToolbarHoverBackground}}" />
                <Setter Property="controls:SplitButton.BorderBrush" Value="{DynamicResource {x:Static ux:Colors.ToolbarHoverBorder}}" />
            </Trigger>
            <Trigger Property="controls:SplitButton.Tag" Value="{StaticResource TrueValue}">
                <Setter Property="controls:SplitButton.Background" Value="{DynamicResource {x:Static ux:Colors.ToolbarHoverBackground}}" />
                <Setter Property="controls:SplitButton.BorderBrush" Value="{DynamicResource {x:Static ux:Colors.ToolbarHoverBorder}}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static ux:Colors.MainForeground}}"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource SplitButtonFocusVisualStyle}"/>
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.MenuButtonHeightKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:SplitButton}">
                    <Grid>
                        <Border                            
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="{TemplateBinding CornerRadius}"
                            Background="{TemplateBinding Background}">
                            <Grid HorizontalAlignment="Left">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="1"/>
                                    <ColumnDefinition Width="10"/>
                                </Grid.ColumnDefinitions>
                                <Button                                    
                                    Name="PART_Button"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Left"
                                    Focusable="False"
                                    Style="{StaticResource HeaderButtonStyle}"
                                    Margin="{TemplateBinding Control.Padding}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    ContentTemplate="{TemplateBinding HeaderTemplate}"
                                    ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                    Content="{TemplateBinding Header}"
                                    Grid.Column="0" />
                                <Rectangle Fill="{TemplateBinding BorderBrush}" Grid.Column="1" Visibility="Hidden" Name="separator"/>
                                <ToggleButton                                    
                                    Grid.Column="2"                                                                                     
                                    Name="PART_DropDownButton"                                    
                                    Style="{StaticResource ExpanderStyle}"/>
                                <ToggleButton
                                    Style="{StaticResource DummyToggleButton}"
                                    Grid.Column="2"
                                    Focusable="False"
                                    IsChecked="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
                            </Grid>
                        </Border>
                        <Popup
                            Name="PART_Popup"
                            Placement="Bottom"                            
                            IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" 
                            AllowsTransparency="True"                            
                            Focusable="False"                               
                            PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                            <Border
                                CornerRadius="{TemplateBinding CornerRadius}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{DynamicResource {x:Static ux:Colors.MainBackground}}">
                                <ItemsPresenter
                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                    KeyboardNavigation.TabNavigation="Cycle"   
                                    Width="120"
                                    UseLayoutRounding ="{TemplateBinding UseLayoutRounding}"/>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
